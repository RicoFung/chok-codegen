<#assign className = table.className>   
<#assign classNameLower = table.className?uncap_first> 
<#assign classNameFirstLower = table.classNameFirstLower>
<#assign subpkg = subpackage?replace("/",".")>
<?xml version="1.0" encoding="UTF-8"?>  
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">   
<#macro mapperEl value>${r"#{"}${value}}</#macro>
<#macro mapperItemEl value>${r"#{item."}${value}}</#macro>
<#macro mapperDynamicWhereEl value>${r"#{dynamicWhere."}${value}}</#macro>

<mapper namespace="${basepackage}.${subpkg}.${module}.dao.${className}Dao">
	<!-- 开启基于redis的二级缓存 -->
	<!-- 
    <cache type="chok.redis.mybatis.RedisCache">
    	<property name="eviction" value="LRU" />
        <property name="flushInterval" value="6000000" />
        <property name="size" value="1024" />
        <property name="readOnly" value="false" />
    </cache>
     -->

	<!-- 
	****************************************************************************************************
	* WRITE
	****************************************************************************************************
	-->
	
    <!-- 自动生成id策略 -->
    <insert id="create" parameterType="${basepackage}.${subpkg}.${module}.model.entity.${className}Entity" useGeneratedKeys="true" keyProperty="<#if table.pkCount gte 1><#list table.compositeIdColumns as column><@mapperEl column.columnNameFirstLower/></#list></#if>"> 
       	INSERT INTO ${table.sqlName?upper_case} 
       	(<#list table.columns as column> ${column.sqlName?upper_case}<#if column_has_next>,</#if></#list>) 
       	VALUES
       	(<#list table.columns as column> <@mapperEl column.columnNameFirstLower/><#if column_has_next>,</#if></#list>)
    </insert>  
    
    <insert id="createBatch">
    	INSERT INTO ${table.sqlName?upper_case}
    	(
        <#list table.notPkColumns as column>
        ${column.sqlName?upper_case}<#if column_has_next>,</#if>
        </#list>
        )
	    SELECT T.*
        FROM 
        (
	    <foreach collection ="list" item="item" index="index" separator="UNION ALL">
	    SELECT
        <#list table.notPkColumns as column>
		<@mapperItemEl column.columnNameFirstLower/> AS ${column.sqlName?upper_case}<#if column_has_next>,</#if>
       	</#list>
	    FROM DUAL
	    </foreach>
        ) T
    </insert>
	
	<delete id="remove">
		DELETE FROM ${table.sqlName?upper_case} 
		<#if table.pkCount gte 1>
		 WHERE 
		<#list table.compositeIdColumns as column>${column.sqlName?upper_case} IN
		<foreach collection="array" item="${column.columnNameLower}" index="index" open="(" close=")" separator=","><@mapperEl column.columnNameLower/></foreach><#if column_has_next> AND </#if>
		</#list>
		</#if>
	</delete>
	
	<update id="modify" parameterType="${basepackage}.${subpkg}.${module}.model.entity.${className}Entity">
		UPDATE ${table.sqlName?upper_case} T
		<set>
        <#list table.notPkColumns as column>
        <if test="@chok2.devwork.dao.Ognl@isNotNull(${column.columnNameFirstLower})"> T.${column.sqlName?upper_case} = <@mapperEl column.columnNameFirstLower/><#if column_has_next>,</#if></if>
        </#list>
        </set>
	     <#if table.pkCount gte 1>
         WHERE <#list table.compositeIdColumns as column>T.${column.sqlName?upper_case} = <@mapperEl column.columnNameLower/> <#if column_has_next> and </#if> </#list>
         </#if>        
	</update>
  	
  	<update id="modifyBatch">
  		<foreach collection="list" index="index" item="item" open="begin" close=";end;" separator=";">
	        UPDATE ${table.sqlName?upper_case} T
	        <set>
		       <#list table.notPkColumns as column>
		       <if test="@chok2.devwork.dao.Ognl@isNotEmpty(item.${column.columnNameFirstLower})"> T.${column.sqlName?upper_case} = <@mapperItemEl column.columnNameFirstLower/>,</if>
		       </#list>
	        </set>
			<#if table.pkCount gte 1>
			WHERE <#list table.compositeIdColumns as column>T.${column.sqlName?upper_case} = <@mapperItemEl column.columnNameLower/> <#if column_has_next> and </#if> </#list>
	   		</#if>  
    	</foreach>
  	</update>

	<!-- 
	****************************************************************************************************
	* READ
	****************************************************************************************************
	-->
  	
	<sql id="dynamicColumns">
		<choose>
			<when test="@chok2.devwork.dao.Ognl@isNotEmpty(dynamicColumns) and @chok2.devwork.dao.Ognl@isNotNull(dynamicColumns)">
			    <foreach collection ="dynamicColumns" item="col" index="index" separator=",">
					<#list table.columns as column>
					<if test="col == '${column.columnNameLower}'">T.${column.sqlName?upper_case}</if>
					</#list>
			    </foreach>
			</when>
			<otherwise>
				<#list table.columns as column>
				T.${column.sqlName?upper_case}<#if column_has_next>,</#if> 
				</#list>
			</otherwise>
		</choose>
	</sql>
	
	<sql id="dynamicOrder">
		<choose>
			<when test="@chok2.devwork.dao.Ognl@isNotEmpty(dynamicOrder)">
				ORDER BY <foreach collection="dynamicOrder" index="index" item="item" separator=",">TT.<include refid="orderParse" /> ${r'${item.sortOrder}'}</foreach>  
			</when>
			<otherwise>
				<#if table.pkCount gte 1>
				ORDER BY <#list table.compositeIdColumns as column>TT.${column.sqlName?upper_case}<#if column_has_next>, </#if> </#list>
				</#if> 
			</otherwise>
		</choose>
	</sql>
	<sql id="orderParse">
		<#list table.columns as column>
		<if test="item.sortName == '${column.columnNameLower}'">${column.sqlName?upper_case}</if>
		</#list>
	</sql>
	
	<sql id="dynamicWhere">
		<where>
			<#if table.pkCount gte 1>
			<#list table.compositeIdColumns as column>
			<if test="@chok2.devwork.dao.Ognl@isNotEmpty(dynamicWhere.${column.columnNameFirstLower}Array)"> 
				AND T.${column.sqlName?upper_case} IN
				<foreach collection="dynamicWhere.${column.columnNameFirstLower}Array" item="${column.columnNameFirstLower}" index="index" open="(" close=")" separator=","><@mapperEl column.columnNameLower/></foreach>
			</if>
			</#list>
			</#if>  				
	       	<#list table.notPkColumns as column>
	       	<if test="@chok2.devwork.dao.Ognl@isNotEmpty(dynamicWhere.${column.columnNameFirstLower})"> AND T.${column.sqlName?upper_case} LIKE '%'||<@mapperDynamicWhereEl column.columnNameFirstLower/>||'%'</if>
	       	</#list>
		</where>
	</sql>	
	
	<!-- getOne -->
	<resultMap type="${basepackage}.${subpkg}.${module}.model.data.${className}GetOneData" id="getOneData">
        <#list table.columns as column>
        <result property="${column.columnNameLower}" column="${column.sqlName?upper_case}"/>
		</#list>
	</resultMap>
	<select id="getOne" resultMap="getOneData">
		SELECT <include refid="dynamicColumns"/> 
		  FROM ${table.sqlName?upper_case} T 
	     <#if table.pkCount gte 1>
         WHERE <#list table.compositeIdColumns as column>T.${column.sqlName?upper_case} = <@mapperEl column.columnNameLower/> <#if column_has_next> and </#if> </#list>
         </#if> 
	</select>
	
	<!-- getList -->
	<resultMap type="${basepackage}.${subpkg}.${module}.model.data.${className}GetListData" id="getListData" extends="getOneData">
	</resultMap>
	<select id="getList" parameterType="${basepackage}.${subpkg}.${module}.model.query.${className}GetListQuery" resultType="list" resultMap="getListData">
		<choose>
			<!-- 翻页 -->
			<when test="@chok2.devwork.dao.Ognl@isNotEmpty(page) and @chok2.devwork.dao.Ognl@isNotEmpty(pagesize)">
				SELECT TOP ${r'${pagesize}'} *
				  FROM (SELECT ROW_NUMBER() OVER(<include refid="dynamicOrder" />) AS ROWNUMBER, *
				          FROM 
				          (
				          	SELECT <include refid="dynamicColumns"/> 
				          	  FROM ${table.sqlName?upper_case} T 
				          	<include refid="dynamicWhere" />
				          ) TT) TEMP_ROW
				 WHERE ROWNUMBER &gt; (${r'${page}'}-1)*${r'${pagesize}'}
			</when>
			<!-- 非翻页 -->
			<otherwise>
				SELECT TT.* FROM 
				(
					SELECT <include refid="dynamicColumns"/> FROM ${table.sqlName?upper_case} T
					<include refid="dynamicWhere" />
				) TT
				<include refid="dynamicOrder" />
			</otherwise>
		</choose>
	</select>
	
	<select id="getCount" resultType="int">
		SELECT COUNT(1) FROM ${table.sqlName?upper_case} T
		<include refid="dynamicWhere" />
	</select>
</mapper>  
